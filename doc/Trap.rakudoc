=begin pod

=head1 NAME

Trap - Trap \$*OUT and/or \$*ERR output

=head1 SYNOPSIS

=begin code :lang<raku>
use Trap;

my $out;
my $err;
{   # separate capturing
    $out = Trap(my $*OUT);
    $err = Trap(my $*ERR);
    say "Hello world!";
    note "Goodbye!"
}
print "STDOUT: $out.text()";  # SDDOUT: Hello world!␤
print "STDERR: $err.text()";  # STDERR: Goodbye!␤

my $merged;
{   # merged capturing
    $merged = Trap(my $*OUT, my $*ERR);
    say "Hello world!";
    note "Goodbye!"
}
print $merged.text;  # Hello world!␤Goodbye!␤

my $new;
{   # creating the object manually
    $new = my $*OUT = Trap.new;
    say "Hello world!";
}
print "with object: $new.text()";  # with object: Hello world!␤

{   # ignoring any output
    Trap(my $*OUT, my $*ERR);
    say "shall never be seen";
}

my $trap;
{
    $trap = Trap(my $*OUT);
    note "not on STDOUT";
}
say $trap.silent;  # True

my $visual;
{
    # show output as well as trapping
    $visual = Trap(my $*OUT, :tee<OUT>)
    say "Quality first";  # also shown
}
print $visual.text;  # Quality First␤
=end code

=head1 DESCRIPTION

Trap exports a class C<Trap> that can be called to capture standard
output and/or standard error, typically for a lexical scope.

The class can be called with either one or two arguments, each of
which should be a writeable local dynamic variable C<$*OUT> or
C<$*ERR>. Or one can create the C<Trap> object manually.  Or one
can use C<Trap> to just trap the standard output and/or standard
error (see SYNOPSIS for examples).

Note that if you're only interested in surpressing output from
B<warnings>, you should use the C<quietly> statement prefix.

=head1 METHODS

=head2 text

Returns the combined text that was captured.

=head2 silent

Returns C<True> if no output was captured at all (not even empty
strings), C<False> otherwise.

=head1 TEEING OUTPUT

=begin code :lang<raku>
my $trap = Trap(my $*OUT, :tee<OUT>)
say "foo";        # foo␤    on STDOUT
note $trap.text;  # foo␤    on STDERR
=end code

The named argument C<:tee> can be specified to output captured
output as it is being captured on either the original STDOUT or
STDERR output handle (by specifying the string "OUT" or "ERR").

=begin code :lang<raku>
my $trap = Trap(my $*OUT, :tee("teed.output".IO))
say "foo";        # foo␤    on STDOUT
note $trap.text;  # foo␤    on STDERR
=end code

One can also specify any C<IO::Path> or C<IO::Handle> object to
have the output trapped to.

The name of this named argument is inspired by the
L<Unix C<tee>|https://en.wikipedia.org/wiki/Tee_(command)> command.

=head1 AUTHOR

Elizabeth Mattijsen <liz@raku.rocks>

Source can be located at: https://github.com/lizmat/Trap . Comments and
Pull Requests are welcome.

If you like this module, or what I’m doing more generally, committing to a
L<small sponsorship|https://github.com/sponsors/lizmat/>  would mean a great
deal to me!

=head1 COPYRIGHT AND LICENSE

Copyright 2022, 2024, 2025 Elizabeth Mattijsen

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
